import React, { useEffect, useState } from 'react';
import { supabase } from '../../lib/supabaseClient';
import IngredienteForm from './IngredienteForm';
import { useAuth } from '../auth/AuthProvider';

export default function IngredientesList(){
  const [ingredientes, setIngredientes] = useState([]);
  const [editing, setEditing] = useState(null);
  const { user } = useAuth();

  const fetch = async () => {
    const { data, error } = await supabase.from('ingredientes').select('*').order('id');
    if (error) return alert(error.message);
    setIngredientes(data);
  };

  useEffect(()=>{ fetch(); }, []);

  const createOrUpdate = async (payload) => {
    if (payload.id) {
      const { error } = await supabase.from('ingredientes').update(payload).eq('id', payload.id);
      if (error) return alert(error.message);
    } else {
      const { error } = await supabase.from('ingredientes').insert(payload);
      if (error) return alert(error.message);
    }
    setEditing(null);
    fetch();
  };

  const remove = async (id) => {
    if (!confirm('Eliminar ingrediente?')) return;
    const { error } = await supabase.from('ingredientes').delete().eq('id', id);
    if (error) return alert(error.message);
    fetch();
  };

  const reabastecer = async (id, cantidad=50) => {
    // ejemplo: sumar inventario
    const { data, error } = await supabase.from('ingredientes').select('inventario').eq('id', id).single();
    if (error) return alert(error.message);
    const newInv = (data.inventario || 0) + cantidad;
    await supabase.from('ingredientes').update({ inventario: newInv }).eq('id', id);
    fetch();
  };

  const renovarA0SiComplemento = async (id) => {
    // poner a 0 si tipo = 'complemento'
    const { data, error } = await supabase.from('ingredientes').select('tipo').eq('id', id).single();
    if (error) return alert(error.message);
    if (data.tipo === 'complemento') {
      await supabase.from('ingredientes').update({ inventario: 0 }).eq('id', id);
      fetch();
    } else alert('Solo complementos pueden renovarse a 0');
  };

  return (
    <div className="p-4">
      <h2 className="text-2xl mb-4">Ingredientes</h2>
      <button className="btn mb-4" onClick={()=>setEditing({})}>Nuevo ingrediente</button>
      {editing && <IngredienteForm ingrediente={editing} onSave={createOrUpdate} onCancel={()=>setEditing(null)} />}
      <table className="w-full table-auto">
        <thead>
          <tr>
            <th>Id</th><th>Nombre</th><th>Precio</th><th>Calor√≠as</th><th>Inv.</th><th>Tipo</th><th>Acciones</th>
          </tr>
        </thead>
        <tbody>
          {ingredientes.map(i => (
            <tr key={i.id}>
              <td>{i.id}</td>
              <td>{i.nombre}</td>
              <td>{i.precio}</td>
              <td>{i.calorias}</td>
              <td>{i.inventario}</td>
              <td>{i.tipo}</td>
              <td>
                <button onClick={()=>setEditing(i)} className="mr-2">Editar</button>
                <button onClick={()=>remove(i.id)} className="mr-2">Eliminar</button>
                <button onClick={()=>reabastecer(i.id)}>Reabastecer</button>
                <button onClick={()=>renovarA0SiComplemento(i.id)}>Renovar 0</button>
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
}
